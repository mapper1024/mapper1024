@startuml
	class Vector3 {
		+ x : number
		+ y : number
		+ z : number

		+ add(other:Vector3) : Vector3
		+ subtract(other:Vector3) : Vector3
		+ multiplyScalar(scalar:number) : Vector3
		+ divideScalar(scalar:number) : Vector3

		+ lengthSquared() : number
		+ length() : number
		+ normalize() : Vector3
		+ round() : Vector3

		+ map(f:function) : Vector3
	}

	class EntityRef {
		- backend : MapBackend
		+ id : number

		+ async exists() : boolean
		+ async valid() : boolean

		+ async getPString(propertyName:string) : string
		+ async getPNumber(propertyName:string) : number
		+ async getPVector3(propertyName:string) : Vector3

		+ async setPString(propertyName:string, value:string)
		+ async setPNumber(propertyName:string, value:number)
		+ async setPVector3(propertyName:string, value:Vector3)

		+ async remove()
		+ async unremove()
	}

	class NodeRef extends EntityRef {
		 + async getNodeType() : string
		 + async getChildren() : Iterable<NodeRef>
		 + async getParent() : NodeRef <<nullable>>
		 + async getEdges() : Iterable<DirEdgeRef>
	}
	class EdgeRef extends EntityRef {
		+ async getNodes() : Iterable<NodeRef>
	}
	class DirEdgeRef extends EdgeRef {
		+ async getDirOtherNode() : NodeRef
	}

	abstract class MapBackend {
		+ loaded : boolean
		+ constructor()
		+ async load()

		+ getEntityRef(id:number) : EntityRef
		+ getNodeRef(id:number) : NodeRef
		+ getEdgeRef(id:number) : EdgeRef
		+ getDirEdgeRef(id:number, startId:number) : DirEdgeRef
	}

	EntityRef - MapBackend : > refers to

	class SqlJsMapBackend extends MapBackend {
		- db : Database

		+ constructor(options:Object)
	}

	class SQLiteMapBackend extends MapBackend {
		- db : Database

		+ constructor(filename:string, options:Object)
	}

	class Mapper {
		- backend : MapBackend

		+ constructor(backend:MapBackend)
		+ render(element:HTMLElement) : RenderContext
	}

	Mapper - MapBackend : > attached to

	class RenderContext {
		- undoStack : Array<Action>
		- redoStack : Array<Action>

		+ constructor(parent:HTMLElement, mapper:Mapper)
		+ disconnect()
	}

	RenderContext - Mapper : > attached to

	abstract class Action {
		+ constructor(context:RenderContext, options:Object)
		+ empty() : boolean
		+ async perform() : Action
	}

	Action - RenderContext : > operates on

	class BulkAction extends Action {}
	class ChangeNameAction extends Action {}
	class DrawPathAction extends Action {}
	class NodeCleanupAction extends Action {}
	class RemoveAction extends Action {}
	class RemoveEdgeAction extends Action {}
	class SetNodeSpaceAction extends Action {}
	class TranslateAction extends Action {}
	class UnremoveAction extends Action {}
	class UnremoveEdgeAction extends Action {}

	UnremoveAction <--> RemoveAction : undoes
	UnremoveEdgeAction <--> RemoveEdgeAction : undoes
@enduml
